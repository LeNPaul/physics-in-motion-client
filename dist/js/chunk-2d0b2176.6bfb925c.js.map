{"version":3,"sources":["webpack:///./src/views/HookesLaw.vue","webpack:///./src/views/HookesLaw.vue?fb7b"],"names":["class","id","mounted","script","p5","left","right","springHeight","maxHeight","minHeight","over","move","M","K","D","R","ps","vs","as","f","drawSpring","fill","baseWidth","rect","width","height","updateSpring","abs","mouseX","mouseY","constrain","setup","createCanvas","rectMode","CORNERS","noStroke","draw","clear","background","mousePressed","_","mouseReleased","__exports__","render"],"mappings":"0IACOA,MAAM,W,EACT,eAIM,OAJDA,MAAM,YAAU,CACnB,eAAoB,UAAhB,eACJ,eAA2L,SAAxL,wLACH,eAAiU,SAA9T,gU,KAGL,eAEM,OAFDA,MAAM,YAAU,CACnB,eAA+D,OAA1DA,MAAM,gCAAgCC,GAAG,e,MAPhD,EAMA,G,gDAPF,eAUM,MAVN,EAUM,G,mCAMO,GACbC,QADa,WAEX,IAAMC,EAAS,SAAAC,GAGb,IACIC,EACAC,EAFAC,EAAe,GAGfC,EAAY,IACZC,EAAY,IACZC,GAAO,EACPC,GAAO,EAEPC,EAAI,EACJC,EAAI,GACJC,EAAI,IACJC,EAAI,IAEJC,EAAKD,EACLE,EAAK,EACLC,EAAK,EACLC,EAAI,EAiBR,SAASC,IAEPhB,EAAGiB,KAAK,IACR,IAAIC,EAAY,GAAMN,EAAM,EAC5BZ,EAAGmB,KAAKnB,EAAGoB,MAAQ,EAAIF,EAAWN,EAAKT,EAAcH,EAAGoB,MAAQ,EAAIF,EAAWlB,EAAGqB,QAE9Ef,GAAQC,EACVP,EAAGiB,KAAK,KAERjB,EAAGiB,KAAK,KAEVjB,EAAGmB,KAAKlB,EAAMW,EAAIV,EAAOU,EAAKT,GAEhC,SAASmB,IAEDf,IACJQ,GAAKN,GAAMG,EAAKD,GAChBG,EAAKC,EAAIP,EACTK,EAAKH,GAAKG,EAAKC,GACfF,GAAUC,GAERb,EAAGuB,IAAIV,GAAM,KACfA,EAAK,GAILP,EADEN,EAAGwB,OAASvB,GAAQD,EAAGwB,OAAStB,GAASF,EAAGyB,OAASb,GAAMZ,EAAGyB,OAASb,EAAKT,EAM5EI,IACFK,EAAKZ,EAAGyB,OAAStB,EAAe,EAChCS,EAAKZ,EAAG0B,UAAUd,EAAIP,EAAWD,IAhDrCJ,EAAG2B,MAAQ,WACT3B,EAAG4B,aAAa,IAAK,KACrB5B,EAAG6B,SAAS7B,EAAG8B,SACf9B,EAAG+B,WACH9B,EAAOD,EAAGoB,MAAQ,EAAI,IACtBlB,EAAQF,EAAGoB,MAAQ,EAAI,KAGzBpB,EAAGgC,KAAO,WACRhC,EAAGiC,QAEHjC,EAAGkC,WAAW,KACdZ,IACAN,KAsCDhB,EAAGmC,aAAe,SAAAC,GACb9B,IACFC,GAAO,IAGXP,EAAGqC,cAAgB,SAAAD,GACjB7B,GAAO,IAGM,IAAI,IAAGR,EAAQ,c,qBC/FpC,MAAMuC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0b2176.6bfb925c.js","sourcesContent":["<template>\n  <div class=\"row g-5\">\n    <div class=\"col-md-6\">\n      <h2>Hooke's Law</h2>\n      <p>This law describes how a spring behaves. Simply put, the amount of force required to move a spring is proportional to how far the spring is displaced from its equilibrium position.</p>\n      <p>What this means is the farther you compress or depress a spring from its resting position, the faster it will rebound back. Try clicking on the grey square to see how the spring behaves. What happens when you displace the spring to its maximum position and release? What happens when you do a smaller displacement?</p>\n    </div>\n\n    <div class=\"col-md-6\">\n      <div class=\"d-flex justify-content-center\" id=\"p5Canvas\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport P5 from 'p5' // Package from npm\n\nexport default {\n  mounted() {\n    const script = p5 => {\n      // Define variables here\n      // Spring drawing constants for top bar\n      let springHeight = 32,\n          left,\n          right,\n          maxHeight = 200,\n          minHeight = 100,\n          over = false,\n          move = false;\n      // Spring simulation constants\n      let M = 3,  // Mass\n          K = 0.2,  // Spring constant\n          D = 0.92, // Damping\n          R = 150;  // Rest position\n      // Spring simulation variables\n      let ps = R,   // Position\n          vs = 0.0, // Velocity\n          as = 0,   // Acceleration\n          f = 0;    // Force\n      // Set up is here\n      p5.setup = () => {\n        p5.createCanvas(400, 400)\n        p5.rectMode(p5.CORNERS);\n        p5.noStroke();\n        left = p5.width / 2 - 100;\n        right = p5.width / 2 + 100;\n      }\n      // NOTE: Draw is here\n      p5.draw = () => {\n        p5.clear();\n        // Black background for now\n        p5.background(102);\n        updateSpring();\n        drawSpring();\n      }\n      function drawSpring() {\n        // Draw base\n        p5.fill(0.2);\n        let baseWidth = 0.5 * ps + -8;\n        p5.rect(p5.width / 2 - baseWidth, ps + springHeight, p5.width / 2 + baseWidth, p5.height);\n        // Set color and draw top bar\n        if (over || move) {\n          p5.fill(255);\n        } else {\n          p5.fill(204);\n        }\n        p5.rect(left, ps, right, ps + springHeight);\n      }\n      function updateSpring() {\n        // Update the spring position\n        if ( !move ) {\n          f = -K * ( ps - R ); // f=-ky\n          as = f / M;          // Set the acceleration, f=ma == a=f/m\n          vs = D * (vs + as);  // Set the velocity\n          ps = ps + vs;        // Updated position\n        }\n        if (p5.abs(vs) < 0.1) {\n          vs = 0.0;\n        }\n        // Test if mouse if over the top bar\n        if (p5.mouseX > left && p5.mouseX < right && p5.mouseY > ps && p5.mouseY < ps + springHeight) {\n          over = true;\n        } else {\n          over = false;\n        }\n        // Set and constrain the position of top bar\n        if (move) {\n          ps = p5.mouseY - springHeight / 2;\n          ps = p5.constrain(ps, minHeight, maxHeight);\n        }\n      }\n       p5.mousePressed = _ => {\n        if (over) {\n          move = true;\n        }\n      }\n      p5.mouseReleased = _ => {\n        move = false;\n      }\n    }\n    const p5canvas = new P5(script, 'p5Canvas');\n  }\n}\n</script>\n","import { render } from \"./HookesLaw.vue?vue&type=template&id=9f76adf8\"\nimport script from \"./HookesLaw.vue?vue&type=script&lang=js\"\nexport * from \"./HookesLaw.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/paul.le/Google Drive/Personal/GitHub/physics-in-motion/physics-in-motion-app/client/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}